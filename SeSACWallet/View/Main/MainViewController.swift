//
//  MainViewController.swift
//  SeSACWallet
//
//  Created by Madeline on 2/14/24.
//

import FSCalendar
import RealmSwift
import SnapKit
import UIKit

class MainViewController: BaseViewController {

    let tableView = UITableView()
    let calendar = FSCalendar()
    let dataList = ["ÎßåÎëê", "ÌÑ∞Ìîº", "Ïª§Ìîº"]
    
    var list: Results<AccountBookTable>!
    let repository = AccountBookTableRepository()
    
    let realm = try! Realm()
    let dateFormat = DateFormatter()
    
    
    // ÏñòÎäî ÌïúÎ≤àÎßå Ïã§ÌñâÎèº
    override func viewDidLoad() {
        super.viewDidLoad()
        
        dateFormat.dateFormat = "yyyyÎÖÑ MMÏõî ddÏùº hhÏãú"
        
        print(realm.configuration.fileURL)
        
        // MARK: Realm Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
        // 1. Realm ÏúÑÏπòÏóê Ï†ëÍ∑º
        // ÏúÑÎ°ú Î∫å
        
        // 2. Realm Ï§ë ÌäπÏ†ï ÌïòÎÇòÏùò ÌÖåÏù¥Î∏î Í∞ÄÏßÄÍ≥† Ïò§Í∏∞
//        list = realm.objects(AccountBookTable.self)
        
        // MARK: Ï†ïÎ†¨!
        // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÇ¨Ïö© -> Ï†ïÎ†¨ÏùÑ Ìï¥ÏÑú Î≥ÄÏàòÏóê Îã¥Ïùå! Îçî Îπ†Î•¥Îã§!
        // Í∏àÏï° ÏàúÏúºÎ°ú Ïù¥ÎØ∏ Ï†ïÎ†¨Îêú ÏÉÅÌÉúÎ°ú Î¶¨Ïä§Ìä∏Ïóê Îã¥ÏïÑÎ≥¥Ïûê -> ÏøºÎ¶¨!
        // Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ†¨Ìïú Í≤É
//        list = realm.objects(AccountBookTable.self).sorted(byKeyPath: "money", ascending: true)
        
        
        // Îû® Îç∞Ïù¥ÌÑ∞Í∞Ä Î≥ÄÌïòÎ©¥ listÏóêÏÑú ÏïåÏïÑÏÑú Î∞òÏòÅÎêúÎã§! Í∑∏ÎûòÏÑú ÌÖåÏù¥Î∏îÎ∑∞ reloadÎßå Ìï¥Ï£ºÎ©¥ ÎêúÎã§.
        
        // MARK: Filter!!!
//        list = realm.objects(AccountBookTable.self).where {
//            // $0.money >= 30000 // 3ÎßåÏõê Ïù¥ÏÉÅ ÌïÑÌÑ∞
//            $0.isDeposit == false // ÏûÖÍ∏àÎßå ÌïÑÌÑ∞
//            // $0.category == "study"
//        }.sorted(byKeyPath: "money", ascending: true)
        
        
        // list = repository.fetch()
        list = repository.fetchItem("study")
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        tableView.reloadData()

    }
    
    override func configureHierarchy() {
        view.addSubview(tableView)
        view.addSubview(calendar)
    }
    
    override func configureConstraints() {
        calendar.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide)
            make.horizontalEdges.equalTo(view.safeAreaLayoutGuide)
            make.height.equalTo(500)
        }
        
        tableView.snp.makeConstraints { make in
            make.top.equalTo(calendar.snp.bottom)
            make.horizontalEdges.bottom.equalTo(view.safeAreaLayoutGuide)
        }
    }
    
    override func configureView() {
        super.configureView() // BaseViewControllerÏùò ÎÇ¥Ïö©ÎèÑ Ïã§ÌñâÌï¥
        
        // MARK: FSCalendar
        calendar.delegate = self
        calendar.dataSource = self
        
        
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "mainCell")
        
        navigationItem.title = "Ïö©ÎèàÍ∏∞ÏûÖÏû•"
        
        let rightitem = UIBarButtonItem(image: UIImage(systemName: "plus"), style: .plain, target: self, action: #selector(rightBarButtonItemTapped))
        navigationItem.rightBarButtonItem = rightitem
        
        // MARK: ÎÇ†Ïßú Í∏∞Ï§Ä Ï†ïÎ†¨ Î≤ÑÌäº
        let leftitem = UIBarButtonItem(title: "TODAY", style: .plain, target: self, action: #selector(todayBarButtonItemTapped))
        let allleftitem = UIBarButtonItem(title: "ALL", style: .plain, target: self, action: #selector(allBarButtonItemTapped))
        navigationItem.leftBarButtonItems = [leftitem, allleftitem]
        
        // MARK: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌïÑÌÑ∞ Í∏∞Îä• Ï∂îÍ∞Ä
        
        
    }
    
    @objc func rightBarButtonItemTapped() {
        let vc = AddViewController()
        navigationController?.pushViewController(vc, animated: true)
    }
    
    @objc func todayBarButtonItemTapped() {
        // MARK: Ïò§Îäò ÎÇ†ÏßúÎßå ÌïÑÌÑ∞ÎßÅÌï¥ÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í≥†, -> listÏóê ÎÑ£Í∏∞
        // DateÎäî Ïãú, Î∂Ñ, Ï¥àÎ°ú ÎÅùÎÇòÎäîÍ≤å ÏïÑÎãàÎùº, 001Z Ïù¥Îü∞Í±∞ Îçî ÏûàÏùå
        // Í∑ºÎç∞ Í±∞Í∏∞ÍπåÏßÄ ÌïòÍ∏∞ ÏâΩÏßÄ ÏïäÏúºÎãàÍπå, Ï∫òÎ¶∞ÎçîÎùºÎäî Íµ¨Ï°∞Ï≤¥Î•º ÏÇ¨Ïö©Ìï¥ÏÑú ÎπÑÍµêÌïòÎäîÍ≤å Ï¢ãÏùå
        
//        print(Date())
        
        // Ïò§Îäò ÏãúÏûë ÎÇ†Ïßú(ÏãúÍ∞Ñ)
        let start = Calendar.current.startOfDay(for: Date())
        
        // Ïò§Îäò ÎÅùÎÇòÎäî ÎÇ†Ïßú(ÏãúÍ∞Ñ) == ÎÇ¥Ïùº ÏãúÏûë ÎÇ†Ïßú!
        let end: Date = Calendar.current.date(byAdding: .day, value: 1, to: start) ?? Date()
        
        let predicate = NSPredicate(format: "registerationDate >= %@ && registerationDate < %@", start as NSDate, end as NSDate)
    
        list = realm.objects(AccountBookTable.self).filter(predicate)
        
        tableView.reloadData()
    }

    @objc func allBarButtonItemTapped() {
        
    }
}

extension MainViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return list.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "mainCell")!
        let row = list[indexPath.row]
        
        let result = dateFormat.string(from: row.registerationDate)
        print(row.registerationDate)
        
        cell.textLabel?.text = "\(result)ü•ü\(row.money)Ïõê \(row.category)"
        
        
        // MARK: Document Ìè¥ÎçîÏóê ÏûàÎäî Ïù¥ÎØ∏ÏßÄÎ•º ÏÖÄÏóê Î≥¥Ïó¨Ï£ºÍ∏∞
        // Document ÏúÑÏπò Ï∞æÍ∏∞ > Í≤ΩÎ°ú ÏôÑÏÑ± > URL Í∏∞Î∞òÏúºÎ°ú Ï°∞Ìöå
        if let image = loadImageFromDocument(fileName: "\(row.id)") {
            cell.imageView?.image = image
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        // MARK: Realm Delete ÏÇ≠Ï†ú
        // Îû® ÌååÏùºÏóêÏÑú Ï†úÍ±∞!!
        // ÏúÑÎ°ú Î∫å
//        try! realm.write {
//            realm.delete(list[indexPath.row])
//        }
//        
//        tableView.reloadData()
        
        // MARK: Realm Update
        // Ìïú Î†àÏΩîÎìúÏóê ÌäπÏ†ï columnÍ∞íÏùÑ ÏàòÏ†ïÌïòÍ≥† Ïã∂ÏùÄ Í≤ΩÏö∞
//        try! realm.write {
//            list[indexPath.row].category = "Í∞úÎ∞ú"
//        }
        
        let record = list[indexPath.row]
        repository.updateFavorite(record)
        
        // MARK: Realm Update 2
        // Ìïú Î†àÏΩîÎìúÍ∞Ä ÏïÑÎãàÎùº Ï†ÑÏ≤¥ columnÏóê ÎåÄÌïú Í∞í ÏàòÏ†ï
//        try! realm.write {
//            list.setValue(100000, forKey: "money")
//        }
        repository.updateMoney(value: 10000, key: "money")
        
        // MARK: Realm Update3
        // Ìïú Î†àÏΩîÎìúÏóêÏÑú Ïó¨Îü¨ Ïª¨Îüº Ï†ïÎ≥¥Î•º ÏàòÏ†ïÌïòÍ≥† Ïã∂ÏùÑ Îïå
//        try! realm.write {
//            realm.create(AccountBookTable.self, value: ["id": list[indexPath.row].id, "money": 100, "favorite": true], update: .modified)
//        }
//        
        repository.updateItem(id: list[indexPath.row].id, money: 999, category: "develop")
        
        tableView.reloadData()
    }
}

extension MainViewController: FSCalendarDelegate, FSCalendarDataSource {
    
    func calendar(_ calendar: FSCalendar, numberOfEventsFor date: Date) -> Int {
        // TODO: Ìï† Ïùº Í∞úÏàòÏóê ÎßûÍ≤å numberOfEventsFor return
        
        let start = Calendar.current.startOfDay(for: date)
        let end: Date = Calendar.current.date(byAdding: .day, value: 1, to: start) ?? Date()
        let predicate = NSPredicate(format: "registerationDate >= %@ && registerationDate < %@", start as NSDate, end as NSDate)
        
        list = realm.objects(AccountBookTable.self).filter(predicate)
        tableView.reloadData()
        let events = min(list.count, 3)
        return events
    }
    
    func calendar(_ calendar: FSCalendar, didSelect date: Date, at monthPosition: FSCalendarMonthPosition) {
        
        let start = Calendar.current.startOfDay(for: date)//ÏÑ†ÌÉùÌïú ÎÇ†ÏßúÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÏãúÏûëÏùº
        
        let end: Date = Calendar.current.date(byAdding: .day, value: 1, to: start) ?? Date()
        
        let predicate = NSPredicate(format: "registerationDate >= %@ && registerationDate < %@", start as NSDate, end as NSDate)
        
        list = realm.objects(AccountBookTable.self).filter(predicate)
        
        tableView.reloadData()
    }
    
    // ÎÇ†Ïßú ÎåÄÏã† Îì§Ïñ¥Í∞ÄÎäî title
//    func calendar(_ calendar: FSCalendar, titleFor date: Date) -> String? {
//        return "TITLEüí∏"
//    }
    
    // ÏÖÄÏóê Îì§Ïñ¥Í∞ÄÎäî Ïù¥ÎØ∏ÏßÄ
//    func calendar(_ calendar: FSCalendar, imageFor date: Date) -> UIImage? {
//        return UIImage(systemName: "star")
//    }
}
